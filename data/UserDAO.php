<?php 


//Import conection
include 'Connect.php';
include '../model/User.php';
//Extiends the conection, inheriting all of Conecction that is the function connection and now it can use the content of file.
class UserDAO extends Connect {
	//Variable protected
	protected static $cnx;

	//Funcion que permite conectar en todo momento
	private static function getConection(){
		//self to invoke this class and invoke $cnx
		/* With this the variable $cnx is generated, and is filled with the connection when the connection itself is established*/
		self::$cnx = Connect::connection();
		
	}

	//Method to disconnectfrom BD
	/* Private because they will not be used in any other case or externally and are of private scope
		getting the concept of encapsulation*/

	private static function disconnect(){
		//This close the conection in PDO
		
		self::$cnx = null;
	}

	/* Method to log the user
	 * This function what you will receive is a user as parameter and it will be the entity that will receive 
	 * the imported user entity in the second include.
	 */
	/* Method that serves to validate the login
     * @param object $user
	 * @return boolean
	 */
	
	public static function login($user){
		// A query is generated by selecting the fields that will be sent via AJAX and do not compromise the security
		// of the system as they are visible via HTML.
		
		
		$query = "SELECT id_user, user_name, user_password_hash, user_email, name, id_priv, date_reg FROM users WHERE user_name = :user_name AND 
		user_password_hash = :user_password";
		
		
		//We select all user information
		//$query = "SELECT * FROM users WHERE user_name = :user_name AND user_password_hash = :password";
		
		//Initialize the connection
		self::getConection();
		
		//Returns the result, preparing the query
		$result = self::$cnx->prepare($query);

		//The parameters are sent the user in the form by user_name field, the object $user, to the user of the form
		$user_bd = $user->getUser_name();
		$result->bindParam(":user_name", $user_bd);

		//The same with the password, Passing the parameter directly to this query
		$pass_bd = $user->getUser_password_hash();
		$result->bindParam(":user_password", $pass_bd);

		//We run the query the PDO connection
		$result->execute();

		
		//We count the result, if there are results true otherwise false
		//It is corrected since the result is in a static object and not in the variable $ result
		//if(count($result)){
		if($result->rowCount() > 0){
			//return true;
			//If it is desired to verify positive result and it will generate the Boolean exit of the number of 
			//resualtas of the query
			//return "OK";
			//Returns the number of rows with the fetch function and treats it as an array
			$rows = $result->fetch();

			//We validate against SQL inyecion on the BackEnd side
			if($rows["user_name"] == $user->getUser_name() && $rows["user_password_hash"] == $user->getUser_password_hash()){

				return true;
				//return "OK";
				
			}//if rows
	
		}//if$result
		//at all times we return false unless there are values ​​posted in the query
		return false;
		//If you want to check false result
		//return "Falso";
	} //function_login


	/*
	 * after doing the validation you have to obtain the user
	 */
	/**
	 * Method used to obtain a user
	 *
	 * @param object $user
	 * @return object
	 */
	
	 public static function getUser($user){
		// Hay que especificar que campos necesitamos

		$query = "SELECT id_user, user_name, user_email, name, id_priv, date_reg FROM users WHERE user_name = :user_name AND 
		user_password_hash = :user_password";
		
		//Initialize the connection
		self::getConection();
		
		//Returns the result, preparing the query
		$result = self::$cnx->prepare($query);

		$user_bd = $user->getUser_name();
		$result->bindParam(":user_name", $user_bd);
		
		$pass_bd = $user->getUser_password_hash();
		$result->bindParam(":user_password", $pass_bd);

		//Execution
		$result->execute();

		$rows = $result->fetch();

		$user = new User();
		//We send the information through its properties
		//In this way we will already have loaded in the new object in the instance of the entity
		$user->setId_user($rows["id_user"]);
		$user->setUser_name($rows["user_name"]);
		$user->setUser_email($rows["user_email"]);
		$user->setName($rows["name"]);
		$user->setId_Priv($rows["id_priv"]);
		$user->setDate_reg($rows["date_reg"]);

		//Return the entity
		return $user;
		
	} //function getUsuario




	public static function regUser($user){
		//Query to Execute
		/*$query = "INSERT INTO users (id_user, user_name, user_password_hash, user_email, name, id_priv, date_reg) 
				  VALUES (NULL, ':user_name', ':user_password_hash', ':user_email', ':name', ':id_priv', ':date_reg')";*/

		$query = "INSERT INTO users (id_user, user_name, user_password_hash, user_email, name, id_priv, date_reg) VALUES (NULL, :user_name, :user_password_hash, :user_email, :name, :id_priv, :date_reg)";

		self::getConection();
	
		$result = self::$cnx->prepare($query);

				
		$name = $user->getName();
		$result->bindParam(":name", $name);

		$user_name = $user->getUser_name();
		$result->bindParam(":user_name", $user_name);

		$user_email = $user->getUser_email();
		$result->bindParam(":user_email", $user_email);

		$user_password_hash = $user->getUser_password_hash();
		$result->bindParam(":user_password_hash", $user_password_hash);

		$id_priv = $user->getId_Priv();
		$result->bindParam(":id_priv", $id_priv);

		$date_reg = $user->getDate_reg();
		$result->bindParam(":date_reg", $date_reg);

		
		/*echo "Username: " . $user_name . "<br/>";
		echo "Name: " . $name . "<br/>";
		echo "Email: " . $user_email . "<br/>";
		echo "Password: " . $user_password_hash . "<br/>";
		echo "Privilege: " . $id_priv . "<br/>";
		echo "Date: " . $date_reg . "<br/>";
		echo $query;

		echo "<br/>Insercion Exitosa";*/
	
		
		/*$result->execute();
		
		//We count the result, if there are results true otherwise false
		//It is corrected since the result is in a static object and not in the variable $ result
		//if(count($result)){
		$filas = $result->rowCount();
		echo "Filas: " . $filas;*/

		if($result->execute()){
			//return true;
			//echo "Insercion Exitosa";
			self::disconnect();
			return true;
		}

		return false;

	}//function regUser

	public static function changePass($data_user){

		$last_pass = $data_user->getUser_password_hash();
		//$result->bindParam(":last_pass", $last_pass);

		$new_pass = $data_user->getNew_pass();
		//$result->bindParam(":new_pass", $new_pass);

		$rewrite_pass = $data_user->getRewrite_pass();
		//$result->bindParam(":rewrite_pass", $rewrite_pass);
		//Print Variables		
		echo "Password: " . $last_pass . "<br/>";
		echo "New Password: " . $new_pass . "<br/>";
		echo "Rewite Password: " . $rewrite_pass . "<br/>";

		//Verify new and Rewrite pass
		if($new_pass == $rewrite_pass){
			echo "Proced<br/>";
		}else {
			echo "Verifique su nuevo Password y su confirmación, no son iguales";
		}

		

	}

	


}

